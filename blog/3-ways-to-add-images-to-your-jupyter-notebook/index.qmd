---
title: "3 Ways to Add Images to Your Jupyter Notebook"
date: "2020-11-06"
categories: [Python, Data Science, Visualization, Jupyter]
image: "img/_featured_image.png"
id: 5
---

![](img/_featured_image.png)


:::{.callout-note}
ðŸ‘‰ This article is also published onÂ **[Better Programming blog](https://medium.com/better-programming/3-ways-to-add-images-to-your-jupyter-notebook-61ddfa27e565)**.
:::

# Introduction 

The Jupyter Notebook (formerly IPython Notebooks) is a popular web-based interactive environment that was first started from the IPython project and is currently maintained by the nonprofit organizationÂ [Project Jupyter](https://jupyter.org/). 
It's a convenient tool to create and share documents that contain codes, equations, texts, and visualizations. 
A Jupyter Notebook can be easily converted to HTML, LaTeX, PDF, Markdown, Python, and other open standard formats[^1].

In this post, I will present three ways to add images to your notebook. The first two approaches are pretty standard that rely on external resources to illustrate the images, and those are to use the image URL or to load an image from a local file. 
However, both of these methods rely on external resources. 
To contain all images used in the notebook within itself without relying on any external source, we can use the Base64 encoding algorithm to encode our images and use those encoded data to illustrate them. 
So, we will briefly talk about the Base64 algorithm too.

Here, I will be using theÂ `Image`Â class from IPythonâ€™sÂ `display`Â module to show all images.

# Approach 1: Add an image from a local file {#sec-approach1_local_file}

We can add images from your local drive by providing the path to the file.

```python
from IPython import display
display.Image("./image.png")
```

There are two downsides to this approach: 

1. The local or absolute path provided may not work well on another system. 

2. You have to make sure to include all images used in a notebook with anyone you want to share. You may end up compressing all files to a single zip file for convenience when sharing your notebook.


# Approach 2: Add an image from a URL {#sec-approach2_url}

You can also add an image to your notebook using the URL link to the image, as shown below.

```python
from IPython import display
display.Image("URL of the image")
```

In this case, the image provider may remove the image or change the image properties without knowing it. 
So, letâ€™s say you have an old notebook that has a broken image link. 
It might be difficult to retrieve the original image. 
Even if you are taken the image from your website, you should be careful not to change the image link or properties!

# Approach 3: Embed an image by Base64 Encode-Decode {#sec-approach3_base64embed}

The first two approaches rely on external resources. 
In @sec-approach1_local_file, we used the path to a file that is saved locally. 
Any change in the filename or path may impact the image in the notebook. 
In @sec-approach2_url, we rely on a URL, and any change in the original link will impact the image in the notebook. 
Unlike the previous methods, Approach 3 embeds the image as a text using theÂ *[Base64 encoding algorithm](https://en.wikipedia.org/wiki/Base64)*. 
This way, we will not be relying on any external resources for the embedded image. 
Hence, we can have all images embedded in the same notebook file.

Base64 is a binary-to-text encoding algorithm to convert data (including but not limited to images) as plain text. 
It is one of the most popular binary-to-text encoding schemes (if not the most one). 
It's widely used in text documents such as HTML, JavaScript, CSS, or XML scripts[^2]. 
However, technically speaking, you can even encode/decode audio or video files too!!

First, you need to encode your image. For this, you can use the online toolÂ [Base64-Image](https://www.base64-image.de/). After you upload your image, you can then click onÂ the copy image, as shown below.

![Screenshot of the uploaded image at [base64-image](https://www.base64-image.de/)](img/base64encoding.png){fig-alt="Screenshot"}

Now you can paste the encoded image code into your notebook, but first, you should removeÂ *`data:image/png;base64,`*Â at the beginning. Donâ€™t forget to also remove the comma after base64!

Now that we have the encoded image code, we can use the Python standardÂ [base64 library](https://docs.python.org/3/library/base64.html)Â to decode the base64 data, as shown below.

```{python}
#| echo: true
#| fig-cap: "An image decoded from Base64"

from IPython import display
from base64 import b64decode
base64_data = ""

display.Image(b64decode(base64_data))
```

As you may have noticed by now, the main advantage of using Base64 to add all images to your Notebook is the fact that do yo no longer need to worry about any external resources for your images as they are all self-contained in your Notebook. 
The other point to be aware of is that including the images in your notebook will increase your notebookâ€™s file size depending on the image resolution.

# Conclusion

In this post, we went over three ways to add an image to a Jupyter Notebook, and those are through 1) a URL, 2) a local file, or 3) by Base64 encoding the image data. 
I also provided a resource link that you can use to Base64 encode your image. 
The main benefit of using the Base64 encoding scheme is to reduce (or even) remove any external images in your notebook.

:::{.callout-note}
ðŸ““ You can find the notebook for this post on [GitHub](https://github.com/e-alizadeh/data-science-blog/blob/master/notebooks/Add_Images_to_Jupyter_Notebook/AddImage2Notebook.ipynb).
:::


[^1]: Wikipedia,Â [Project Jupyter](https://en.wikipedia.org/wiki/Project_Jupyter)Â (Accessed on November 16, 2020)

[^2]: Wikipedia,Â [Base64](https://en.wikipedia.org/wiki/Base64)Â (Accessed on November 16, 2020)
